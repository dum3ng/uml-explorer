shadow$provide.module$node_modules$fast_xml_parser$src$xmlstr2xmlnode=function(global,require,module,exports){function processTagValue(tagName,val,options){val&&(options.trimValues&&(val=val.trim()),val=options.tagValueProcessor(val,tagName),val=parseValue(val,options.parseNodeValue,options.parseTrueNumberOnly));return val}function parseValue(val,shouldParse,parseTrueNumberOnly){return shouldParse&&"string"===typeof val?(""===val.trim()||isNaN(val)?shouldParse="true"===val?!0:"false"===val?!1:val:
(-1!==val.indexOf("0x")?shouldParse=Number.parseInt(val,16):-1!==val.indexOf(".")?(shouldParse=Number.parseFloat(val),val=val.replace(/\.?0+$/,"")):shouldParse=Number.parseInt(val,10),parseTrueNumberOnly&&(shouldParse=String(shouldParse)===val?shouldParse:val)),shouldParse):util.isExist(val)?val:""}function buildAttributesMap(attrStr,options){if(!options.ignoreAttributes&&"string"===typeof attrStr){attrStr=attrStr.replace(/\r?\n/g," ");var matches=util.getAllMatches(attrStr,attrsRegx);const len=matches.length;
attrStr={};for(let i=0;i<len;i++){var JSCompiler_inline_result=matches[i][1];if(options.ignoreNameSpace){const tags=JSCompiler_inline_result.split(":"),prefix="/"===JSCompiler_inline_result.charAt(0)?"/":"";"xmlns"===tags[0]?JSCompiler_inline_result="":2===tags.length&&(JSCompiler_inline_result=prefix+tags[1])}JSCompiler_inline_result.length&&(void 0!==matches[i][4]?(options.trimValues&&(matches[i][4]=matches[i][4].trim()),matches[i][4]=options.attrValueProcessor(matches[i][4],JSCompiler_inline_result),
attrStr[options.attributeNamePrefix+JSCompiler_inline_result]=parseValue(matches[i][4],options.parseAttributeValue,options.parseTrueNumberOnly)):options.allowBooleanAttributes&&(attrStr[options.attributeNamePrefix+JSCompiler_inline_result]=!0))}if(Object.keys(attrStr).length)return options.attrNodeName?(matches={},matches[options.attrNodeName]=attrStr,matches):attrStr}}function findClosingIndex(xmlData,str,i,errMsg){xmlData=xmlData.indexOf(str,i);if(-1===xmlData)throw Error(errMsg);return xmlData+
str.length-1}const util=require("module$node_modules$fast_xml_parser$src$util"),buildOptions=require("module$node_modules$fast_xml_parser$src$util").buildOptions,xmlNode=require("module$node_modules$fast_xml_parser$src$xmlNode");"\x3c((!\\[CDATA\\[([\\s\\S]*?)(]]\x3e))|((NAME:)?(NAME))([^\x3e]*)\x3e|((\\/)(NAME)\\s*\x3e))([^\x3c]*)".replace(/NAME/g,util.nameRegexp);!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt);!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);
const defaultOptions={attributeNamePrefix:"@_",attrNodeName:!1,textNodeName:"#text",ignoreAttributes:!0,ignoreNameSpace:!1,allowBooleanAttributes:!1,parseNodeValue:!0,parseAttributeValue:!1,arrayMode:!1,trimValues:!0,cdataTagName:!1,cdataPositionChar:"\\c",tagValueProcessor:function(a,tagName){return a},attrValueProcessor:function(a,attrName){return a},stopNodes:[]};exports.defaultOptions=defaultOptions;const props="attributeNamePrefix attrNodeName textNodeName ignoreAttributes ignoreNameSpace allowBooleanAttributes parseNodeValue parseAttributeValue arrayMode trimValues cdataTagName cdataPositionChar tagValueProcessor attrValueProcessor parseTrueNumberOnly stopNodes".split(" ");
exports.props=props;const attrsRegx=/([^\s=]+)\s*(=\s*(['"])(.*?)\3)?/g;exports.getTraversalObj=function(xmlData,options){xmlData=xmlData.replace(/\r\n?/g,"\n");options=buildOptions(options,defaultOptions,props);const xmlObj=new xmlNode("!xml");let currentNode=xmlObj;var textData="";for(var i=0;i<xmlData.length;i++)if("\x3c"===xmlData[i])if("/"===xmlData[i+1]){var closeIndex=findClosingIndex(xmlData,"\x3e",i,"Closing Tag is not closed."),tagName=xmlData.substring(i+2,closeIndex).trim();if(options.ignoreNameSpace){var colonIndex=
tagName.indexOf(":");-1!==colonIndex&&(tagName=tagName.substr(colonIndex+1))}currentNode&&(currentNode.val=currentNode.val?util.getValue(currentNode.val)+""+processTagValue(tagName,textData,options):processTagValue(tagName,textData,options));options.stopNodes.length&&options.stopNodes.includes(currentNode.tagname)&&(currentNode.child=[],void 0==currentNode.attrsMap&&(currentNode.attrsMap={}),currentNode.val=xmlData.substr(currentNode.startIndex+1,i-currentNode.startIndex-1));currentNode=currentNode.parent;
textData="";i=closeIndex}else if("?"===xmlData[i+1])i=findClosingIndex(xmlData,"?\x3e",i,"Pi Tag is not closed.");else if("!--"===xmlData.substr(i+1,3))i=findClosingIndex(xmlData,"--\x3e",i,"Comment is not closed.");else if("!D"===xmlData.substr(i+1,2))closeIndex=findClosingIndex(xmlData,"\x3e",i,"DOCTYPE is not closed."),i=0<=xmlData.substring(i,closeIndex).indexOf("[")?xmlData.indexOf("]\x3e",i)+1:closeIndex;else if("!["===xmlData.substr(i+1,2))closeIndex=findClosingIndex(xmlData,"]]\x3e",i,"CDATA is not closed.")-
2,i=xmlData.substring(i+9,closeIndex),textData&&(currentNode.val=util.getValue(currentNode.val)+""+processTagValue(currentNode.tagname,textData,options),textData=""),options.cdataTagName?(tagName=new xmlNode(options.cdataTagName,currentNode,i),currentNode.addChild(tagName),currentNode.val=util.getValue(currentNode.val)+options.cdataPositionChar,i&&(tagName.val=i)):currentNode.val=(currentNode.val||"")+(i||""),i=closeIndex+2;else{a:{closeIndex=void 0;tagName="";for(i+=1;i<xmlData.length;i++){colonIndex=
xmlData[i];if(closeIndex)colonIndex===closeIndex&&(closeIndex="");else if('"'===colonIndex||"'"===colonIndex)closeIndex=colonIndex;else if("\x3e"===colonIndex){i={data:tagName,index:i};break a}else"\t"===colonIndex&&(colonIndex=" ");tagName+=colonIndex}i=void 0}const result=i;i=result.data;closeIndex=result.index;var separatorIndex=i.indexOf(" ");tagName=i;colonIndex=!0;-1!==separatorIndex&&(tagName=i.substr(0,separatorIndex).replace(/\s\s*$/,""),i=i.substr(separatorIndex+1));options.ignoreNameSpace&&
(separatorIndex=tagName.indexOf(":"),-1!==separatorIndex&&(tagName=tagName.substr(separatorIndex+1),colonIndex=tagName!==result.data.substr(separatorIndex+1)));currentNode&&textData&&"!xml"!==currentNode.tagname&&(currentNode.val=util.getValue(currentNode.val)+""+processTagValue(currentNode.tagname,textData,options));0<i.length&&i.lastIndexOf("/")===i.length-1?(i="/"===tagName[tagName.length-1]?tagName=tagName.substr(0,tagName.length-1):i.substr(0,i.length-1),textData=new xmlNode(tagName,currentNode,
""),tagName!==i&&(textData.attrsMap=buildAttributesMap(i,options)),currentNode.addChild(textData)):(textData=new xmlNode(tagName,currentNode),options.stopNodes.length&&options.stopNodes.includes(textData.tagname)&&(textData.startIndex=closeIndex),tagName!==i&&colonIndex&&(textData.attrsMap=buildAttributesMap(i,options)),currentNode.addChild(textData),currentNode=textData);textData="";i=closeIndex}else textData+=xmlData[i];return xmlObj}}
//# sourceMappingURL=module$node_modules$fast_xml_parser$src$xmlstr2xmlnode.js.map
