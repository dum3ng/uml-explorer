{"version":3,"sources":["ue/data.cljs"],"mappings":"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","names":["ue.data/tid","cljs.core.atom","ue.data/gen-datoms","data","owner-id","datoms","i","cljs.core/count","vec__52022","cljs.core.nth","entries","cljs.core.into","entry","k","v","clojure.string/starts-with?","cljs.core/name","ue.constants/attr-prefix","cljs.core.conj","cljs.core.keyword","cljs.core.subs","cljs.core/vector?","children","p1__52016#","cljs.core.map","G__52025","G__52026","cds","cljs.core/cat","cljs.core/vec","cljs.core.concat","eid","cljs.core.swap_BANG_","cljs.core/dec","entity","cljs.core.assoc","ue.data/prepare-db!","m","cljs.core.js__GT_clj","xmi","cljs.core/select-keys","datascript.core.transact_BANG_","ue.data/*conn*","var_args","G__52030","ue.data/q","args-arr__4839__auto__","len__4818__auto__","i__4819__auto__","argseq__4840__auto__","cljs.core/IndexedSeq","seq52028","G__52029","cljs.core/first","cljs.core/next","self__4805__auto__","query","G__52031","G__52032","cljs.core/deref","datascript.core/q","args","cljs.core.apply","ue.data/pull","pattern","id","G__52033","G__52034","G__52035","datascript.core/pull","ue.data/pull-many","ids","G__52036","G__52037","G__52038","ue.data/clear-db!","new-db","datascript.core.reset_conn_BANG_"],"sourcesContent":["(ns ue.data\n  (:require [clojure.string :as str]\n            [datascript.core :as d]\n            [ue.constants :refer [attr-prefix]]))\n\n\n;(def schema\n;  {:owner {:db/valueType :db.type/ref}})\n;\n(declare ^:dynamic *conn*)\n\n(def tid (atom -1))\n\n(defn gen-datoms\n  ;; generate datoms by an xmi object\n  ;; the data should be clj map\n  [data owner-id]\n  (loop [datoms []\n         i 0]\n    (if (< i (count data))\n      (let [entries (into [] data)\n            entry (nth entries i)\n            [k v] entry]\n        (if (str/starts-with? (name k) attr-prefix)\n          ;;if k start with attribute prefix, then it will be a plain text ,\n          ;; and will be save as attributes of an existed entity\n          (recur (conj datoms {:db/id                                        owner-id\n                               (keyword (subs (name k) (count attr-prefix))) v})\n                 (inc i))\n          (if (vector? v)\n            ;; if value is array, then create a collection of specified\n            ;; entities.\n            (let [children (map #(gen-datoms {k %} owner-id) v)\n                  cds (into [] cat children)]\n              (recur (vec (concat datoms cds)) (inc i)))\n            ;;if value is an object/string, then create an empty entity with\n            ;; only :entity/type, and set its owner\n            (let [eid (swap! tid dec)\n                  entity {:db/id eid :entity/type k}\n                  entity (if (nil? owner-id) entity\n                                             (assoc entity :owner owner-id))]\n              (if (string? v)\n                (recur (conj datoms (assoc entity :text v)) (inc i))\n                (recur (vec (concat datoms [entity] (gen-datoms v eid)))\n                       (inc i)))))))\n      datoms)))\n\n(defn prepare-db!\n  ;; data is js object\n  [data]\n  (let [m (js->clj data :keywordize-keys true)\n        xmi (select-keys m [:xmi:XMI])\n        datoms (gen-datoms xmi nil)]\n    (d/transact! *conn* datoms)))\n\n(defn q\n  ([query]\n   (d/q query @*conn*))\n  ([query & args]\n   (apply d/q query @*conn* args)))\n\n\n(defn pull [pattern id]\n  (d/pull @*conn* pattern id))\n\n(defn pull-many [pattern ids]\n  (d/pull @*conn* pattern ids))\n\n(defn clear-db! [new-db] (d/reset-conn! *conn* new-db))\n\n"]}