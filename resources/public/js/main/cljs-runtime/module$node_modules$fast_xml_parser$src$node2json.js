shadow$provide.module$node_modules$fast_xml_parser$src$node2json=function(global,require,module,exports){const util=require("module$node_modules$fast_xml_parser$src$util"),convertToJson=function(node,options,parentTagName){const jObj={};if(!(node.child&&!util.isEmptyObject(node.child)||node.attrsMap&&!util.isEmptyObject(node.attrsMap)))return util.isExist(node.val)?node.val:"";if(util.isExist(node.val)&&("string"!==typeof node.val||""!==node.val&&node.val!==options.cdataPositionChar)){var asArray=
util.isTagNameInArrayMode(node.tagname,options.arrayMode,parentTagName);jObj[options.textNodeName]=asArray?[node.val]:node.val}util.merge(jObj,node.attrsMap,options.arrayMode);asArray=Object.keys(node.child);for(let index=0;index<asArray.length;index++){const tagName=asArray[index];if(node.child[tagName]&&1<node.child[tagName].length){jObj[tagName]=[];for(let tag in node.child[tagName])node.child[tagName].hasOwnProperty(tag)&&jObj[tagName].push(convertToJson(node.child[tagName][tag],options,tagName))}else{const result=
convertToJson(node.child[tagName][0],options,tagName),asArray=!0===options.arrayMode&&"object"===typeof result||util.isTagNameInArrayMode(tagName,options.arrayMode,parentTagName);jObj[tagName]=asArray?[result]:result}}return jObj};exports.convertToJson=convertToJson}
//# sourceMappingURL=module$node_modules$fast_xml_parser$src$node2json.js.map
