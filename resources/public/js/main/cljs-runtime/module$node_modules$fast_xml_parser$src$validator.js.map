{
"version":3,
"file":"module$node_modules$fast_xml_parser$src$validator.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/fast-xml-parser/src/validator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fast_xml_parser$src$validator\"] = function(global,require,module,exports) {\n'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n};\n\nconst props = ['allowBooleanAttributes'];\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = util.buildOptions(options, defaultOptions, props);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n\n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"There is an unnecessary space between tag name and backward slash '</ ..'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, i));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg) {\n              return getErrorObject('InvalidTag', \"Closing tag '\"+otg+\"' is expected inplace of '\"+tagName+\"'.\", getLineNumberForPosition(xmlData, i));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else {\n            tags.push(tagName);\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if (xmlData[i] === ' ' || xmlData[i] === '\\t' || xmlData[i] === '\\n' || xmlData[i] === '\\r') {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  } else if (tags.length > 0) {\n    return getErrorObject('InvalidXml', \"Invalid '\"+JSON.stringify(tags, null, 4).replace(/\\r?\\n/g, '')+\"' found.\", 1);\n  }\n\n  return true;\n};\n\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  var start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      var tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nvar doubleQuote = '\"';\nvar singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n        continue;\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(attrStr, matches[i][0]))\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(attrStr, matches[i][0]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  var lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return lines.length;\n}\n\n//this function returns the position of the last character of match within attrStr\nfunction getPositionFromMatch(attrStr, match) {\n  return attrStr.indexOf(match) + match.length;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","readPI","xmlData","i","start","length","tagname","substr","getErrorObject","getLineNumberForPosition","readCommentAndCDATA","angleBracketsCount","validateAttributeString","attrStr","options","matches","util","getAllMatches","validAttrStrRegxp","attrNames","getPositionFromMatch","undefined","allowBooleanAttributes","attrName","isName","hasOwnProperty","validateAmpersand","re","match","count","code","message","lineNumber","err","msg","line","index","substring","split","lines","indexOf","defaultOptions","props","validate","exports.validate","buildOptions","tags","tagFound","reachedRoot","closingTag","tagName","trim","startChar","tagClosed","doubleQuote","singleQuote","value","result","isValid","otg","pop","push","afterAmp","JSON","stringify","replace"]
}
