{
"version":3,
"file":"module$node_modules$fast_xml_parser$src$parser.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3G,MAAMC,WAAaH,OAAA,CAAQ,mDAAR,CAAnB,CACMI,aAAeJ,OAAA,CAAQ,wDAAR,CADrB,CAEMK,UAAYL,OAAA,CAAQ,wDAAR,CAFlB,CAGMM,aAAeN,OAAA,CAAQ,8CAAR,CAAkBM,CAAAA,YAHvC,CAIMC,UAAYP,OAAA,CAAQ,mDAAR,CAElBE,QAAQM,CAAAA,KAAR;AAAgBC,QAAQ,CAACC,OAAD,CAAUC,OAAV,CAAmBC,gBAAnB,CAAqC,CAC3D,GAAIA,gBAAJ,GAC0B,CAAA,CAGpB,GAHDA,gBAGC,GAH0BA,gBAG1B,CAH6C,EAG7C,EADEC,gBACF,CADWN,SAAUO,CAAAA,QAAV,CAAmBJ,OAAnB,CAA4BE,gBAA5B,CACX,CAAW,CAAA,CAAX,GAAAC,gBAJN,EAKI,KAAME,MAAA,CAAOF,gBAAOG,CAAAA,GAAIC,CAAAA,GAAlB,CAAN,CAGJN,OAAA,CAAUL,YAAA,CAAaK,OAAb,CAAsBN,SAAUa,CAAAA,cAAhC,CAAgDb,SAAUc,CAAAA,KAA1D,CACJC,QAAAA,CAAiBhB,YAAaiB,CAAAA,eAAb,CAA6BX,OAA7B,CAAsCC,OAAtC,CAEvB,OAAOR,WAAWmB,CAAAA,aAAX,CAAyBF,OAAzB,CAAyCT,OAAzC,CAZoD,CAc7DT,QAAQqB,CAAAA,aAAR,CAAwBvB,OAAA,CAAQ,kDAAR,CAAsBwB,CAAAA,YAC9CtB;OAAQmB,CAAAA,eAAR,CAA0BjB,YAAaiB,CAAAA,eACvCnB,QAAQoB,CAAAA,aAAR,CAAwBnB,UAAWmB,CAAAA,aACnCpB,QAAQuB,CAAAA,mBAAR,CAA8BzB,OAAA,CAAQ,uDAAR,CAA2ByB,CAAAA,mBACzDvB,QAAQY,CAAAA,QAAR,CAAmBP,SAAUO,CAAAA,QAC7BZ,QAAQwB,CAAAA,SAAR,CAAoB1B,OAAA,CAAQ,kDAAR,CACpBE,QAAQyB,CAAAA,WAAR,CAAsBC,QAAQ,CAAClB,OAAD,CAAUmB,MAAV,CAAkBlB,OAAlB,CAA2B,CACvD,MAAOT,QAAQqB,CAAAA,aAAR,CAAsBrB,OAAQmB,CAAAA,eAAR,CAAwBX,OAAxB,CAAiCC,OAAjC,CAAtB,CAAiEkB,MAAjE,CAAyElB,OAAzE,CADgD,CA7BkD;",
"sources":["node_modules/fast-xml-parser/src/parser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$fast_xml_parser$src$parser\"] = function(global,require,module,exports) {\n'use strict';\n\nconst nodeToJson = require('./node2json');\nconst xmlToNodeobj = require('./xmlstr2xmlnode');\nconst x2xmlnode = require('./xmlstr2xmlnode');\nconst buildOptions = require('./util').buildOptions;\nconst validator = require('./validator');\n\nexports.parse = function(xmlData, options, validationOption) {\n  if( validationOption){\n    if(validationOption === true) validationOption = {}\n    \n    const result = validator.validate(xmlData, validationOption);\n    if (result !== true) {\n      throw Error( result.err.msg)\n    }\n  }\n  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);\n  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)\n  //print(traversableObj, \"  \");\n  return nodeToJson.convertToJson(traversableObj, options);\n};\nexports.convertTonimn = require('./nimndata').convert2nimn;\nexports.getTraversalObj = xmlToNodeobj.getTraversalObj;\nexports.convertToJson = nodeToJson.convertToJson;\nexports.convertToJsonString = require('./node2json_str').convertToJsonString;\nexports.validate = validator.validate;\nexports.j2xParser = require('./json2xml');\nexports.parseToNimn = function(xmlData, schema, options) {\n  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);\n};\n\n\nfunction print(xmlNode, indentation){\n  if(xmlNode){\n    console.log(indentation + \"{\")\n    console.log(indentation + \"  \\\"tagName\\\": \\\"\" + xmlNode.tagname + \"\\\", \");\n    if(xmlNode.parent){\n      console.log(indentation + \"  \\\"parent\\\": \\\"\" + xmlNode.parent.tagname  + \"\\\", \");\n    }\n    console.log(indentation + \"  \\\"val\\\": \\\"\" + xmlNode.val  + \"\\\", \");\n    console.log(indentation + \"  \\\"attrs\\\": \" + JSON.stringify(xmlNode.attrsMap,null,4)  + \", \");\n\n    if(xmlNode.child){\n      console.log(indentation + \"\\\"child\\\": {\")\n      const indentation2 = indentation + indentation;\n      Object.keys(xmlNode.child).forEach( function(key) {\n        const node = xmlNode.child[key];\n\n        if(Array.isArray(node)){\n          console.log(indentation +  \"\\\"\"+key+\"\\\" :[\")\n          node.forEach( function(item,index) {\n            //console.log(indentation + \" \\\"\"+index+\"\\\" : [\")\n            print(item, indentation2);\n          })\n          console.log(indentation + \"],\")  \n        }else{\n          console.log(indentation + \" \\\"\"+key+\"\\\" : {\")\n          print(node, indentation2);\n          console.log(indentation + \"},\")  \n        }\n      });\n      console.log(indentation + \"},\")\n    }\n    console.log(indentation + \"},\")\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","nodeToJson","xmlToNodeobj","x2xmlnode","buildOptions","validator","parse","exports.parse","xmlData","options","validationOption","result","validate","Error","err","msg","defaultOptions","props","traversableObj","getTraversalObj","convertToJson","convertTonimn","convert2nimn","convertToJsonString","j2xParser","parseToNimn","exports.parseToNimn","schema"]
}
